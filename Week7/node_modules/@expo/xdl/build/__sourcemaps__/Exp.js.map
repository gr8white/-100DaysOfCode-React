{"version":3,"sources":["Exp.js"],"names":["async","root","let","exp","pkg","await","ProjectUtils","readConfigJsonAsync","entryPoint","main","determineEntryPointAsync","templateSpec","projectRoot","packageManager","config","Logger","notifications","info","code","NotificationCode","PROGRESS","tarStream","pacote","tarball","stream","cache","path","join","UserSettings","dotExpoHomeDirectory","fs","mkdirp","Promise","resolve","reject","extractStream","tar","x","cwd","strip","transform","createFileTransform","onentry","entry","name","replace","toLowerCase","type","basename","on","pipe","appFile","appJson","merge","readAsync","writeAsync","packageFile","packageJson","private","version","description","tags","repository","_resolved","_integrity","_from","initGitRepoAsync","installDependenciesAsync","extractTemplateApp","process","platform","Binaries","isXcodeInstalled","global","warn","insideGit","spawnAsync","debug","e","stdio","recentExpsJsonFile","recentExps","filter","unshift","slice","saveRecentExpRootAsync","icon","iconUrl","pathOrUrl","resolvedPath","existsSync","readableRoot","makePathReadable","expInfoSafeAsync","publicUrl","user","UserManager","ensureLoggedInAsync","Error","username","ThirdParty","getManifest","slug","sdkVersion","iosBundleIdentifier","ios","bundleIdentifier","androidPackage","android","package","args","remoteUsername","remotePackageName","remoteFullPackageName","getThirdPartyInfoAsync","configName","ConfigUtils","configFilenameAsync","getPublishInfoAsync","results","all","map","filteredResults","result","recentValidExpsAsync","recipient","url_","allowUnauthed","Api","callMethodAsync","sendAsync","ps","ProjectSettings","randomness","urlRandomness","resetProjectRandomnessAsync","getProjectRandomnessAsync","UrlUtils","someRandomness","setAsync","rimraf","sync","clearXDLCacheAsync","default","ENTRY_POINT_PLATFORM_TEMPLATE_STRING","Transformer","constructor","data","displayName","write","end","replaced","binaryExtensions","transformFile","includes","extname","getHomeDir","env","pth","homedir","substr","length"],"mappings":"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","file":"../Exp.js","sourcesContent":["/**\n * @flow\n */\n\nimport * as ConfigUtils from '@expo/config';\nimport fs from 'fs-extra';\nimport merge from 'lodash/merge';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\nimport JsonFile from '@expo/json-file';\nimport Minipass from 'minipass';\nimport rimraf from 'rimraf';\nimport pacote from 'pacote';\nimport tar from 'tar';\n\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as ThirdParty from './ThirdParty';\nimport UserManager from './User';\nimport * as UrlUtils from './UrlUtils';\nimport UserSettings from './UserSettings';\nimport * as ProjectSettings from './ProjectSettings';\n\n// FIXME(perry) eliminate usage of this template\nexport const ENTRY_POINT_PLATFORM_TEMPLATE_STRING = 'PLATFORM_GOES_HERE';\n\nexport { default as convertProjectAsync } from './project/Convert';\n\nexport async function determineEntryPointAsync(root: string) {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(root);\n\n  // entryPoint is relative to the packager root and main is relative\n  // to the project root. So if your rn-cli.config.js points to a different\n  // root than the project root, these can be different. Most of the time\n  // you should use main.\n  let entryPoint = pkg.main || 'index.js';\n  if (exp && exp.entryPoint) {\n    entryPoint = exp.entryPoint;\n  }\n\n  return entryPoint;\n}\n\nclass Transformer extends Minipass {\n  constructor(config) {\n    super();\n    this.data = '';\n    this.config = config;\n    this.displayName = config.displayName || config.name;\n  }\n  write(data) {\n    this.data += data;\n    return true;\n  }\n  end() {\n    let replaced = this.data\n      .replace(/Hello App Display Name/g, this.config.displayName || this.config.name)\n      .replace(/HelloWorld/g, this.config.name)\n      .replace(/helloworld/g, this.config.name.toLowerCase());\n    super.write(replaced);\n    return super.end();\n  }\n}\n\n// Binary files, don't process these (avoid decoding as utf8)\nconst binaryExtensions = ['.png', '.jar'];\n\nfunction createFileTransform(config) {\n  return function transformFile(entry) {\n    if (!binaryExtensions.includes(path.extname(entry.path)) && config.name) {\n      return new Transformer(config);\n    }\n  };\n}\n\nexport async function extractTemplateApp(\n  templateSpec: string | object,\n  projectRoot: string,\n  packageManager: 'yarn' | 'npm' = 'npm',\n  config = {}\n) {\n  Logger.notifications.info({ code: NotificationCode.PROGRESS }, 'Extracting project files...');\n  let tarStream = await pacote.tarball.stream(templateSpec, {\n    cache: path.join(UserSettings.dotExpoHomeDirectory(), 'template-cache'),\n  });\n  await fs.mkdirp(projectRoot);\n  await new Promise((resolve, reject) => {\n    const extractStream = tar.x({\n      cwd: projectRoot,\n      strip: 1,\n      transform: createFileTransform(config),\n      onentry(entry) {\n        if (config.name) {\n          // Rewrite paths for bare workflow\n          entry.path = entry.path\n            .replace(/HelloWorld/g, config.name)\n            .replace(/helloworld/g, config.name.toLowerCase());\n        }\n        if (entry.type.toLowerCase() === 'file' && path.basename(entry.path) === 'gitignore') {\n          // Rename `gitignore` because npm ignores files named `.gitignore` when publishing.\n          // See: https://github.com/npm/npm/issues/1862\n          entry.path = entry.path.replace(/gitignore$/, '.gitignore');\n        }\n      },\n    });\n    tarStream.on('error', reject);\n    extractStream.on('error', reject);\n    extractStream.on('close', resolve);\n    tarStream.pipe(extractStream);\n  });\n\n  // Update files\n  Logger.notifications.info({ code: NotificationCode.PROGRESS }, 'Customizing project...');\n\n  let appFile = new JsonFile(path.join(projectRoot, 'app.json'));\n  let appJson = merge(await appFile.readAsync(), config);\n  await appFile.writeAsync(appJson);\n\n  let packageFile = new JsonFile(path.join(projectRoot, 'package.json'));\n  let packageJson = await packageFile.readAsync();\n  // Adding `private` stops npm from complaining about missing `name` and `version` fields.\n  // We don't add a `name` field because it also exists in `app.json`.\n  packageJson = { ...packageJson, private: true };\n  // These are metadata fields related to the template package, let's remove them from the package.json.\n  delete packageJson.name;\n  delete packageJson.version;\n  delete packageJson.description;\n  delete packageJson.tags;\n  delete packageJson.repository;\n  // pacote adds these, but we don't want them in the package.json of the project.\n  delete packageJson._resolved;\n  delete packageJson._integrity;\n  delete packageJson._from;\n  await packageFile.writeAsync(packageJson);\n\n  await initGitRepoAsync(projectRoot);\n  await installDependenciesAsync(projectRoot, packageManager);\n\n  return projectRoot;\n}\n\nasync function initGitRepoAsync(root: string) {\n  if (process.platform === 'darwin' && !Binaries.isXcodeInstalled()) {\n    Logger.global.warn(`Unable to initialize git repo. \\`git\\` not installed.`);\n    return;\n  }\n\n  // let's see if we're in a git tree\n  let insideGit = true;\n  try {\n    await spawnAsync('git', ['rev-parse', '--is-inside-work-tree'], {\n      cwd: root,\n    });\n    Logger.global.debug('New project is already inside of a git repo, skipping git init.');\n  } catch (e) {\n    insideGit = false;\n  }\n\n  if (!insideGit) {\n    try {\n      await spawnAsync('git', ['init'], { cwd: root });\n      Logger.global.info('Initialized a git repository.');\n    } catch (e) {\n      // no-op -- this is just a convenience and we don't care if it fails\n    }\n  }\n}\n\nasync function installDependenciesAsync(projectRoot, packageManager) {\n  Logger.global.info('Installing dependencies...');\n\n  if (packageManager === 'yarn') {\n    await spawnAsync('yarnpkg', ['install'], {\n      cwd: projectRoot,\n      stdio: 'inherit',\n    });\n  } else {\n    await spawnAsync('npm', ['install'], {\n      cwd: projectRoot,\n      stdio: 'inherit',\n    });\n  }\n}\n\nexport async function saveRecentExpRootAsync(root: string) {\n  root = path.resolve(root);\n\n  // Write the recent Exps JSON file\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync();\n  // Filter out copies of this so we don't get dupes in this list\n  recentExps = recentExps.filter(function(x) {\n    return x !== root;\n  });\n  recentExps.unshift(root);\n  return await recentExpsJsonFile.writeAsync(recentExps.slice(0, 100));\n}\n\nfunction getHomeDir(): string {\n  return process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] || '';\n}\n\nfunction makePathReadable(pth) {\n  let homedir = getHomeDir();\n  if (pth.substr(0, homedir.length) === homedir) {\n    return `~${pth.substr(homedir.length)}`;\n  } else {\n    return pth;\n  }\n}\n\nexport async function expInfoSafeAsync(root: string) {\n  try {\n    let {\n      exp: { name, description, icon, iconUrl },\n    } = await ProjectUtils.readConfigJsonAsync(root);\n    let pathOrUrl =\n      icon || iconUrl || 'https://d3lwq5rlu14cro.cloudfront.net/ExponentEmptyManifest_192.png';\n    let resolvedPath = path.resolve(root, pathOrUrl);\n    if (fs.existsSync(resolvedPath)) {\n      icon = `file://${resolvedPath}`;\n    } else {\n      icon = pathOrUrl; // Assume already a URL\n    }\n\n    return {\n      readableRoot: makePathReadable(root),\n      root,\n      name,\n      description,\n      icon,\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\ntype PublishInfo = {\n  args: {\n    username: string,\n    remoteUsername: string,\n    remotePackageName: string,\n    remoteFullPackageName: string,\n    iosBundleIdentifier: ?string,\n    androidPackage: ?string,\n  },\n};\n\nexport async function getThirdPartyInfoAsync(publicUrl: string): Promise<PublishInfo> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Attempted to login in offline mode. This is a bug.');\n  }\n\n  const { username } = user;\n\n  const exp = await ThirdParty.getManifest(publicUrl);\n  const { slug, sdkVersion, version } = exp;\n  if (!sdkVersion) {\n    throw new Error(`sdkVersion is missing from ${publicUrl}`);\n  }\n\n  if (!slug) {\n    // slug is made programmatically for app.json\n    throw new Error(`slug field is missing from exp.json.`);\n  }\n\n  if (!version) {\n    throw new Error(`Can't get version of package.`);\n  }\n\n  const iosBundleIdentifier = exp.ios ? exp.ios.bundleIdentifier : null;\n  const androidPackage = exp.android ? exp.android.package : null;\n  return {\n    args: {\n      username,\n      remoteUsername: username,\n      remotePackageName: slug,\n      remoteFullPackageName: `@${username}/${slug}`,\n      sdkVersion,\n      iosBundleIdentifier,\n      androidPackage,\n    },\n  };\n}\n\n// TODO: remove / change, no longer publishInfo, this is just used for signing\nexport async function getPublishInfoAsync(root: string): Promise<PublishInfo> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Attempted to login in offline mode. This is a bug.');\n  }\n\n  const { username } = user;\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(root);\n\n  const name = exp.slug;\n  const { version, sdkVersion } = exp;\n\n  const configName = await ConfigUtils.configFilenameAsync(root);\n\n  if (!sdkVersion) {\n    throw new Error(`sdkVersion is missing from ${configName}`);\n  }\n\n  if (!name) {\n    // slug is made programmatically for app.json\n    throw new Error(`slug field is missing from exp.json.`);\n  }\n\n  if (!version) {\n    throw new Error(`Can't get version of package.`);\n  }\n\n  const remotePackageName = name;\n  const remoteUsername = username;\n  const remoteFullPackageName = `@${remoteUsername}/${remotePackageName}`;\n  const iosBundleIdentifier = exp.ios ? exp.ios.bundleIdentifier : null;\n  const androidPackage = exp.android ? exp.android.package : null;\n\n  return {\n    args: {\n      username,\n      remoteUsername,\n      remotePackageName,\n      remoteFullPackageName,\n      sdkVersion,\n      iosBundleIdentifier,\n      androidPackage,\n    },\n  };\n}\n\nexport async function recentValidExpsAsync() {\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync();\n\n  let results = await Promise.all(recentExps.map(expInfoSafeAsync));\n  let filteredResults = results.filter(result => result);\n  return filteredResults;\n}\n\nexport async function sendAsync(recipient: string, url_: string, allowUnauthed: boolean = true) {\n  let result = await Api.callMethodAsync('send', [recipient, url_, allowUnauthed]);\n  return result;\n}\n\n// TODO: figure out where these functions should live\nexport async function getProjectRandomnessAsync(projectRoot: string) {\n  let ps = await ProjectSettings.readAsync(projectRoot);\n  let randomness = ps.urlRandomness;\n  if (randomness) {\n    return randomness;\n  } else {\n    return resetProjectRandomnessAsync(projectRoot);\n  }\n}\n\nexport async function resetProjectRandomnessAsync(projectRoot: string) {\n  let randomness = UrlUtils.someRandomness();\n  ProjectSettings.setAsync(projectRoot, { urlRandomness: randomness });\n  return randomness;\n}\n\nexport async function clearXDLCacheAsync() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'ios-simulator-app-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'android-apk-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'starter-app-cache'));\n  Logger.notifications.info(`Cleared cache`);\n}\n"],"sourceRoot":"/@expo/xdl@54.0.4/src"}