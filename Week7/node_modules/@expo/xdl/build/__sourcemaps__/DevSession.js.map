{"version":3,"sources":["DevSession.js"],"names":["async","projectRoot","exp","platform","forceUpdate","keepUpdating","Config","offline","let","authSession","await","UserManager","getSessionAsync","url","UrlUtils","constructManifestUrlAsync","constructWebAppUrlAsync","Error","apiClient","ApiV2Client","clientForUser","postAsync","data","session","description","name","os","hostname","config","slug","primaryColor","source","e","logger","global","debug","setTimeout","startSession","UPDATE_FREQUENCY_SECS","stopSession"],"mappings":";;;;;;;AAeA;;+BACOA,WACLC,WADKD,EAELE,GAFKF,EAGLG,QAHKH,EAILI,cAAuB,KAJlBJ,EAKU;AACf,QAAII,WAAJ,EAAiB;AACfC,qBAAe,IAAfA;AACF;;AAEA,QAAI,CAACC,oCAAOC,OAAR,IAAmBF,YAAvB,EAAqC;AACnC;AACAG,UAAIC,cAAcC,MAAMC,gCAAYC,eAAZD,EAAxBH;;AAEA,UAAI,CAACC,WAAL,EAAkB;AAChB;AACA;AACA;AACF;;AAEA,UAAI;AACFD,YAAIK,GAAJL;AACA,YAAIL,aAAa,QAAjB,EAA2B;AACzBU,gBAAMH,MAAMI,gCAASC,yBAATD,CAAmCb,WAAnCa,CAAZD;AACF,SAFA,MAEO,IAAIV,aAAa,KAAjB,EAAwB;AAC7BU,gBAAMH,MAAMI,gCAASE,uBAATF,CAAiCb,WAAjCa,CAAZD;AACF,SAFO,MAEA;AACL,gBAAM,IAAII,KAAJ,CAAW,yBAAwBd,QAAS,EAA5C,CAAN;AACF;;AAEAK,YAAIU,YAAYC,gCAAYC,aAAZD,CAA0BV,WAA1BU,CAAhBX;AACAE,cAAMQ,UAAUG,SAAVH,CAAoB,mCAApBA,EAAyD;AAC7DI,gBAAM;AACJC,qBAAS;AACPC,2BAAc,GAAEtB,IAAIuB,IAAK,OAAMC,YAAGC,QAAHD,EAAc,EADtC;AAEPC,wBAAUD,YAAGC,QAAHD,EAFH;AAGPvB,sBAHO;AAIPyB,sBAAQ;AACN;AACAJ,6BAAatB,IAAIsB,WAFX;AAGNC,sBAAMvB,IAAIuB,IAHJ;AAINI,sBAAM3B,IAAI2B,IAJJ;AAKNC,8BAAc5B,IAAI4B;AALZ,eAJD;AAWPjB,iBAXO;AAYPkB,sBAAQ;AAZD;AADL;AADuD,SAAzDb,CAANR;AAkBF,OA7BA,CA6BE,OAAOsB,CAAP,EAAU;AACVC,4CAAOC,MAAPD,CAAcE,KAAdF,CAAoBD,CAApBC,EAAwB,+BAA8BD,CAAE,EAAxDC;AACF;;AAEAG,iBAAW;AAAA,eAAMC,aAAapC,WAAboC,EAA0BnC,GAA1BmC,EAA+BlC,QAA/BkC,CAAN;AAAA,OAAXD,EAA2DE,wBAAwB,IAAnFF;AACF;AACF,G;;kBAvDsBC,Y;;;;;QAyDNE,W,GAAAA,W;;AAvEhB;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;AAEA,MAAMD,wBAAwB,EAA9B;;AAEA9B,IAAIH,eAAe,IAAnBG,CA4DO,SAAS+B,WAAT,GAAuB;AAC5BlC,iBAAe,KAAfA;AACF","file":"../DevSession.js","sourcesContent":["// @flow\n\nimport os from 'os';\n\nimport ApiV2Client from './ApiV2';\nimport Config from './Config';\nimport logger from './Logger';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager from './User';\nimport * as ProjectSettings from './ProjectSettings';\n\nconst UPDATE_FREQUENCY_SECS = 20;\n\nlet keepUpdating = true;\n\n// TODO notify www when a project is started, and every N seconds afterwards\nexport async function startSession(\n  projectRoot: string,\n  exp: any,\n  platform: 'native' | 'web',\n  forceUpdate: boolean = false\n): Promise<void> {\n  if (forceUpdate) {\n    keepUpdating = true;\n  }\n\n  if (!Config.offline && keepUpdating) {\n    // TODO(anp) if the user has configured device ids, then notify for those too\n    let authSession = await UserManager.getSessionAsync();\n\n    if (!authSession) {\n      // NOTE(brentvatne) let's just bail out in this case for now\n      // throw new Error('development sessions can only be initiated for logged in users');\n      return;\n    }\n\n    try {\n      let url;\n      if (platform === 'native') {\n        url = await UrlUtils.constructManifestUrlAsync(projectRoot);\n      } else if (platform === 'web') {\n        url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n      } else {\n        throw new Error(`Unsupported platform: ${platform}`);\n      }\n\n      let apiClient = ApiV2Client.clientForUser(authSession);\n      await apiClient.postAsync('development-sessions/notify-alive', {\n        data: {\n          session: {\n            description: `${exp.name} on ${os.hostname()}`,\n            hostname: os.hostname(),\n            platform,\n            config: {\n              // TODO: if icons are specified, upload a url for them too so people can distinguish\n              description: exp.description,\n              name: exp.name,\n              slug: exp.slug,\n              primaryColor: exp.primaryColor,\n            },\n            url,\n            source: 'desktop',\n          },\n        },\n      });\n    } catch (e) {\n      logger.global.debug(e, `Error updating dev session: ${e}`);\n    }\n\n    setTimeout(() => startSession(projectRoot, exp, platform), UPDATE_FREQUENCY_SECS * 1000);\n  }\n}\n\nexport function stopSession() {\n  keepUpdating = false;\n}\n"],"sourceRoot":"/@expo/xdl@54.0.4/src"}